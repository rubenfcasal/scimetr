---
title: "Analysis of Scientific Publication Data with scimetr"
author: "UDC Ranking's Group"
date: '`r paste("scimetr", packageVersion("scimetr"),":", Sys.Date())`'
output: 
  rmarkdown::html_vignette:
    toc: yes
    toc_depth: 2
resource_files:
  - docs/savedrecs1.txt
  - docs/savedrecs2.txt
  - docs/savedrecs3.txt
  - docs/savedrecs4.txt
vignette: >
  %\VignetteIndexEntry{Introduction to the scimetr Package}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = FALSE, fig.height=4, fig.width=7, 
                      fig.align = 'center', out.width = '100%')
# knitr::spin("npsp_intro2.R", knit = FALSE)
```

Instalación
-----------

Para instalar el paquete sería recomendable en primer lugar instalar las dependencias:

```{r dependencies, eval=FALSE}
install.packages(c('dplyr', 'lazyeval', 'stringr', 'ggplot2', 'openxlsx', 'tidyr'))
```

Como de momento no está disponible en CRAN, habría que instalar la versión de desarrollo en GitHub.
En Windows bastaría con instalar la versión binaria del paquete *scimetr_X.Y.Z.zip*
(disponible en ), alternativamente se puede instalar directamente de GitHub:
Una vez instalado ya podríamos cargar el paquete:

```{r }
library(scimetr)
```


## Cargar datos

### Datos de ejemplo
En el paquete se incluye un conjunto de datos de ejemplo correspondiente a la búsqueda
por el campo Organización-Nombre preferido de la UDC (Organization-Enhaced: OG = Universidade da Coruna)
correspondientes al año 2015.

Variables WoS:

```{r }
as.data.frame(attr(wosdf, "variable.labels"))
```

Se podría crear la base de datos con los siguientes comandos

```{r wosdf, eval=FALSE}
db <- wos_CreateDB(wosdf)
# summary(db)
```

### Cargar datos de directorio

Se pueden cargar automáticamente los archivos wos
(tienen una limitación de 500 registros) de un subdirectorio:

```{r }
dir('.', pattern='*.txt')
```

Se combinan los ficheros y se crea la base de datos con los siguientes comandos:

```{r wostxt, cache=TRUE}
wos.txt <- wos_ImportSources(".", other = FALSE)
db <- wos_CreateDB(wos.txt)

str(db)
```

## Sumarios
### Sumario "wos.db"

```{r summary, cache=TRUE}
res1 <- summary(db)
res1
```

### Sumario por años
Obtener sumario por años:

```{r }
res2 <- summary_year(db)
res2
```

## Gráficos
Emplea la librería *ggplot2*.

### "wos.db"

```{r plotdb, warning=FALSE, message=FALSE}

plot(db)
```

### Sumario "wos.db"

```{r }
plot(res1)

plot(res1, pie = TRUE)
```

### Sumario por años

```{r }
plot(res2)

plot(res2, boxplot = TRUE)
```

## Filtrado
### Funciones get
Buscar una persona concreta

```{r }
idAuthors <- get.idAuthors(db,AF == "Angel Bartolome, Miguel")
idAuthors
```

Buscar en nombres personas

```{r }
idAuthors <- get.idAuthors(db, grepl('Miguel A.', AF))
str(idAuthors)
idAuthors[1:10]
```

get.idAreas
Devuelve códigos de las áreas
Multiple conditions are combined with & (see \code{\link[dplyr]{filter}})
Se puede emplear cualquier variable de la correspondiente tabla...

```{r }
get.idAreas(db,SC=='Mathematics')
get.idAreas(db,SC=='Mathematics'| SC=='Dermatology')
```

 get.idCategories

```{r }
get.idCategories(db, grepl('Mathematics', WC))
```

 get.idJournals

```{r }
get.idJournals(db,SO=='JOURNAL OF THE AMERICAN CHEMICAL SOCIETY')
get.idJournals(db,J9=='J AM CHEM SOC')
```

### Obtener documentos de autores
Los indices anteriores se pueden combinar en `get.idDocs`

```{r }
idocs <- get.idDocs(db, idAuthors = idAuthors)
idocs
```

Los índices de documentos se pueden utilizar como filtro p.e. en `summary`.

### Sumarios filtrados
Obtener sumario de autores:

```{r }
summary(db, idocs)
```

Obtener sumario de autores por años:

```{r }
summary_year(db, idocs)
```

## Indices autores
Obtener índices de múltiples autores

```{r }
TC.authors(db, idAuthors)
```

