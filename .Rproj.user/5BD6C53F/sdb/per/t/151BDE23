{
    "collab_server" : "",
    "contents" : "#' ---\n#' title: \"Package rwos: Analysis of Web of Science (WoS) Data with R\"\n#' author: UDC Ranking's Group\n#' date: \"`r as.character(Sys.Date())`\"\n#'\n#' output:\n#'   html_document:\n#'      toc: true\n#'      toc_float: true\n#' ---\n#' Este es un documento Markdown de R.\n#' Markdown permite la creación de páginas web a partir de documentos de texto\n#' de forma muy sencilla y rápida (tiene unas reglas sintácticas muy simples).\n#' R-Markdown es recomendable para difundir análisis realizados con R\n#' (ver p.e. <http://rmarkdown.rstudio.com>).\n#+ spin, include=FALSE, eval= FALSE\n# Una forma rápida de crear este tipo de informes es emplear la funcion *spin*\n# del paquete *knitr* (ver p.e. <http://yihui.name/knitr/demo/stitch>).\n\n# Este informe fue creado con el siguiente comando:\n# library(rmarkdown)\n# browseURL(url = render(knitr::spin('rwos_package.R', knit = FALSE)))\n\n#+ setup, include=FALSE\nknitr::opts_chunk$set(comment=NA, prompt=TRUE, cache = TRUE,\n                      out.width=800, dev='svg', fig.height=6, fig.width=6, warning = FALSE)\n\n#'\n#' Instalación\n#' -----------\n\n#' Instalar *rwos_0.1.1.zip*...\n\n#'\n#' Quick start\n#' -----------\n\nlibrary(rwos)\n\n#' ### Datos de ejemplo\n\nnames(wosdf)\ndb <- wos_CreateDB(wosdf)\nprint(db)\nsummary(db)\n\n\n#' ### Cargar datos de directorio\n\nwos.txt <- wos_ImportSources('txt', other = FALSE)\ndb <- wos_CreateDB(wos.txt)\n\n# print(db.txt)\nsummary(db)\n\n\n#' ### Funciones get\n\n#' Buscar una persona concreta\n\nidAuthors <- get.idAuthors(db,AF == \"Blanco, Francisco J.\")\nidAuthors\n\n#' Buscar en nombres personas\n\nidAuthors <- get.idAuthors(db, grepl('Miguel', AF))\nstr(idAuthors)\nidAuthors\n\n#' Obtener documentos\n#'\nidocs <- get.idDocs(db, idAuthors = idAuthors)\nidocs\nsummary(db, idocs)\n\n\n#'\n#' Herramientas\n#' ------------\n\nlibrary(dplyr)\n\nh.ix=function(author,db){\n  idocs <- get.idDocs(db, idAuthors = author)\n  TC <- sort(db$Docs$TC[db$Docs$idd %in% idocs],decreasing = TRUE)\n  if(sum(TC==0)){\n    hix <- 0\n  }else{\n    pos=1:length(TC)\n    hix <- max(which(TC>=pos))\n  }\n  return(hix)\n}\n\n\ng.ix=function(author,db){\n  idocs <- get.idDocs(db, idAuthors = author)\n  TC <- sort(db$Docs$TC[db$Docs$idd %in% idocs],decreasing = TRUE)\n  if(sum(TC==0)){\n    gix <- 0\n  }else{\n    pos=1:length(TC)\n    pos.sq <- pos^2\n    cit.sums <- cumsum(TC)\n    gix <- max(which(pos.sq<=cit.sums))\n  }\n  return(gix)\n}\n\n\nbib.index <- function(authors,db){\n  H=data.frame(Author=authors, h_index=0, g_index=0)\n  H[,2]=sapply(authors, h.ix,db)\n  H[,3]=sapply(authors, g.ix,db)\n  return(H)\n}\n\n\nbib.index(authors=idAuthors,db)\n\nstable <- function(x, nmax = 10, others = TRUE) {\n  res <- sort(table(x), decreasing = TRUE)\n  n <- length(res)\n  if ( n > nmax) {\n    if (others) {\n      res[nmax] <- sum(res[(nmax+1):n])\n      names(res)[nmax] <- \"Others\"\n    }\n    res <- res[1:nmax]\n  }\n  return(res)\n}\n\nsummary.wos2<-function(object){\n\n  docs=object$Docs\n  AutDoc=object$AutDoc\n  Categories=object$Categories\n  Areas=object$Areas\n  Journals=object$Journals\n  CatDoc=object$CatDoc\n  AreaDoc=object$AreaDoc\n  Country=object$Addresses$Country\n\n  # Years\n  DocYear=table(docs$PY)      # Table of documents per year\n  YearRange=range(docs$PY)    # Range of years\n\n  # Authors\n  nAuDoc=table(AutDoc$idd)          # num. of authors per doc #an\n  AuDoc.mean=mean(nAuDoc)           # mean of authors per doc\n  nDocAu=table(AutDoc$ida)          # num. of docs per author\n  DocAu.mean=mean(nDocAu)           # mean of docs per author\n\n  res <- stable(AutDoc$ida, others = FALSE)\n  names(res) <- object$Authors$AF[as.numeric(names(res))]\n  res\n\n  # Authors per document per year\n  AuDoc.year <- docs %>% group_by(PY)  %>% summarise(avg = round(mean(an),2), med = median(an))\n\n  #DocAu.year=nDocAu.Year %>% group_by(PY) %>% summarise(round(mean(nAuDoc, na.rm = TRUE),2))\n\n\n  # Top 10 Categories\n  ndoccat=sort(table(CatDoc$idc),decreasing = TRUE)[1:10]\n  TopCat=Categories$WC[as.numeric(names(ndoccat))]\n\n\n  # Top 10 Areas\n  ndocarea=sort(table(AreaDoc$idra),decreasing = TRUE)[1:10]\n  TopAreas=Areas$SC[as.numeric(names(ndocarea))]\n\n\n  # Top 10 Journals\n  ndocjour=sort(table(docs$idj),decreasing = TRUE)[1:10]\n  TopJournals=Journals$SO[as.numeric(names(ndocjour))]\n\n\n  # Top 10 Countries\n  TopCountries=sort(table(Country),decreasing = TRUE)[1:10]\n\n\n  #Main Information about data\n  MainInfo=(\"\\n\\nMain Information about data\\n\\n\")\n  MainInfo[2]=paste(\"Articles                         \",dim(docs)[1],\"\\n\")\n  MainInfo[3]=paste(\"Period                           \",YearRange[1],\"-\",YearRange[2],\"\\n\")\n  MainInfo[4]=paste(\"Authors                          \",max(AutDoc$ida),\"\\n\")\n  MainInfo[5]=paste(\"Articles per Author              \",format(DocAu.mean,digits=3),\"\\n\")\n  MainInfo[6]=paste(\"Authors per Article              \",format(AuDoc.mean,digits=3),\"\\n\")\n  MainInfo[7]=paste(\"\\n\")\n  cat(MainInfo)\n\n\n  cat(\"\\nAnnual Scientific Production\\n\\n\")\n  Y1=data.frame(DocYear)\n  names(Y1)=c(\"Year   \", \"Articles\")\n  print(Y1,row.names=FALSE);cat(\"\\n\\n\")\n  #ny=dim(Y1)[1]\n  #GR=round(((Y1[ny,2]/Y1[1,2])^(1/(ny-1))-1)*100,2)\n  #cat(\"Annual Percentage Growth Rate\",GR,\"\\n\\n\")\n\n  #Y2=data.frame()\n  #names(Y2)=c(\"Year   \", \"Articles per Author\")\n  #print(Y2,row.names=FALSE);cat(\"\\n\\n\")\n\n  cat(\"\\nAnnual Authors per Article\\n\\n\")\n  Y3=data.frame(AuDoc.year)\n  names(Y3)=c(\"Year   \", \"Avg\", \"Median\")\n  print(Y3,row.names=FALSE);cat(\"\\n\\n\")\n\n  cat(\"\\nTop 10 Categories\\n\\n\")\n  Y4=data.frame(Categories=TopCat,Articles=as.numeric(ndoccat))\n  print(Y4,row.names=FALSE);cat(\"\\n\\n\")\n\n  cat(\"\\nTop 10 Areas\\n\\n\")\n  Y5=data.frame(Areas=TopAreas,Articles=as.numeric(ndocarea))\n  print(Y5,row.names=FALSE);cat(\"\\n\\n\")\n\n  cat(\"\\nTop 10 Journals\\n\\n\")\n  Y6=data.frame(Journals=TopJournals,Articles=as.numeric(ndocjour))\n  print(Y6,row.names=FALSE);cat(\"\\n\\n\")\n\n  cat(\"\\nTop 10 Countries\\n\\n\")\n  Y7=data.frame(TopCountries)\n  names(Y7)=c(\"Country\", \"Articles\")\n  print(Y7,row.names=FALSE);cat(\"\\n\\n\")\n}\n\n\nsummary.wos2(db)\n\n\nres <- table(db$Addresses$Univ)\niadd <- get.idAddresses(db, grepl(\"Coruna\", Univ))\nidd <- get.idDocs(db, idAddresses = iadd)\nsummary(db, filter = idd)\n\n\nstable(db$Addresses$Univ)\n\n\n### Funciones de búqueda de id faltantes:\n\n\nget.idAreas <- function(db, ...) {\n  Areas <- db$Areas %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Areas$idra\n  names(result) <- Areas$SC\n  return(result)\n}\n\n\nidAreas1=get.idAreas(db,SC=='Mathematics')\nidAreas2=get.idAreas(db,SC=='Mathematics'|SC=='Dermatology')\n\nidAreas1\nidAreas2\n\nget.idCategories <- function(db, ...) {\n  Categories <- db$Categories %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Categories$idc\n  names(result) <- Categories$WC\n  return(result)\n}\n\nidCategories1 <- get.idCategories(db, WC=='Mathematics')\nidCategories2 <- get.idCategories(db, grepl('Mathematics', WC))\n\nidCategories1\nidCategories2\n\nget.idJournals <- function(db, ...) {\n  Journals <- db$Journals %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Journals$idj\n  names(result) <- Journals$SO\n  return(result)\n}\n\nidJournals1 <- get.idJournals(db,SO=='JOURNAL OF THE AMERICAN CHEMICAL SOCIETY')\nidJournals2 <- get.idJournals(db,J9=='J AM CHEM SOC')\n\nidJournals1\nidJournals2\n\n\n######################################################\n### Gráficos (pruebas)\nlibrary(ggplot2)\n\n# Incluye todas las revistas\nl=10\nFJ <- sort(table(db$Docs$idj),decreasing=TRUE)\nn <- length(FJ)\nJournals.sort <- db$Journals$J9[as.numeric(names(FJ))]\nds<-data.frame(group = c(Journals.sort[1:l],\"OTHERS\"),\n  value = c(as.numeric(FJ)[1:l],sum(as.numeric(FJ)[(l+1):n])))\nbp<- ggplot(ds, aes(x=\"\", y=value, fill=group))+\ngeom_bar(width = 1, stat = \"identity\")\npie <- bp + coord_polar(\"y\", start=0)\npie\n\n\n# Incluye solo las revistas mas utilizadas\nl=10\nFJ <- sort(table(db$Docs$idj),decreasing=TRUE)\nn <- length(FJ)\nJournals.sort <- db$Journals$J9[as.numeric(names(FJ))]\nds<-data.frame(group = c(Journals.sort[1:l]),\n  value = c(as.numeric(FJ)[1:l]))\nbp<- ggplot(ds, aes(x=\"\", y=value, fill=group))+\ngeom_bar(width = 1, stat = \"identity\")\npie <- bp + coord_polar(\"y\", start=0)\npie\n\n\n# Incluye todas las categorías\nl=10\nFC <- sort(table(db$CatDoc$idc),decreasing=TRUE)\nn <- length(FC)\nCategories.sort <- db$Categories$WC[as.numeric(names(FC))]\nds<-data.frame(group = c(Categories.sort[1:l],\"OTHERS\"),\n  value = c(as.numeric(FC)[1:l],sum(as.numeric(FC)[(l+1):n])))\nbp<- ggplot(ds, aes(x=\"\", y=value, fill=group))+\ngeom_bar(width = 1, stat = \"identity\")\npie <- bp + coord_polar(\"y\", start=0)\npie\n\n# Incluye solo las categorías mas utilizadas\nl=10\nFC <- sort(table(db$CatDoc$idc),decreasing=TRUE)\nn <- length(FC)\nCategories.sort <- db$Categories$WC[as.numeric(names(FC))]\nds<-data.frame(group = c(Categories.sort[1:l]),\n  value = c(as.numeric(FC)[1:l]))\nbp<- ggplot(ds, aes(x=\"\", y=value, fill=group))+\ngeom_bar(width = 1, stat = \"identity\")\npie <- bp + coord_polar(\"y\", start=0)\npie\n\n\n",
    "created" : 1506673667659.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3106810259",
    "id" : "151BDE23",
    "lastKnownWriteTime" : 1506675756,
    "last_content_update" : 1506675758024,
    "path" : "X:/Dropbox/_Actual/_Rankings/rwos_package/demo/rwos_package.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}