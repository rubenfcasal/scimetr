{
    "collab_server" : "",
    "contents" : "# ---------------------------------------\n# Operaciones Tablas\n# ---------------------------------------\n# NOTAS:\n# - Se podría emplear semi_join(x, y) keeps all observations in x that have a match in y.\n#   Utiliza duplicated() internamente (no óptimo)\n\n#' Get table identifiers\n#'\n#' \\code{get.idDocs} returns the document identifiers (values of the \\code{db$Docs$idd} variable)\n#' corresponding to identifiers of authors (values of \\code{db$Authors$ids}), categories (...), areas (...),\n#' addresses (...) and/or journals (...). Multiple conditions are combined with &.\n#' @param db Object of \\code{\\link{class}} \\code{wos.db}, as returned by \\code{\\link{wos_CreateDB}}.\n#' @param idAuthors optional; author identifiers\n#' @param idCategories optional; categories identifiers\n#' @param idAreas optional; areas identifiers\n#' @param idAddresses optional; addresses identifiers\n#' @param idJournals optional; journals identifiers\n#' @seealso \\code{\\link{wos_CreateDB}}, \\code{\\link[dplyr]{filter}}.\n#' @export\nget.idDocs <- function(db, idAuthors, idCategories, idAreas, idAddresses, idJournals) {\n# ---------------------------------------\n  idDocs <- db$Docs$idd\n  if(!missing(idJournals)) {\n    idDocs <- idDocs[db$Docs$idj %in% idJournals]\n  }\n  if(!missing(idAuthors)) {\n    idDocs <- idDocs[idDocs %in% with(db$AutDoc, idd[ida %in% idAuthors])]\n  }\n  if(!missing(idCategories)) {\n    idDocs <- idDocs[idDocs %in% with(db$CatDoc, idd[idc %in% idCategories])]\n  }\n  if(!missing(idAreas)) {\n    idDocs <- idDocs[idDocs %in% with(db$AreaDoc, idd[idra %in% idAreas])]\n  }\n  if(!missing(idAddresses)) {\n    idDocs <- idDocs[idDocs %in% with(db$AddAutDoc, idd[idad %in% idAddresses])]\n  }\n  return(idDocs)\n}\n\n#' @rdname get.idDocs\n#' @param ... Logical predicates. Multiple conditions are combined with & (see\n#' \\code{\\link[dplyr]{filter}})\n#' @export\nget.idAuthors <- function(db, ...) {\n# ---------------------------------------\n  Authors <- db$Authors %>% filter_(.dots = lazyeval::lazy_dots(...)) %>% select(ida, AF)\n  result <- Authors$ida\n  names(result) <- Authors$AF\n  return(result)\n}\n\n#' @rdname get.idDocs\n#' @export\nget.idAddresses <- function(db, ...) {\n# ---------------------------------------\n  Addresses <- db$Addresses %>% filter_(.dots = lazyeval::lazy_dots(...))\n  return(Addresses$idad)\n}\n\n\n#' @rdname get.idDocs\n#' @export\nget.idAreas <- function(db, ...) {\n# ---------------------------------------\n  Areas <- db$Areas %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Areas$idra\n  names(result) <- Areas$SC\n  return(result)\n}\n\n#' @rdname get.idDocs\n#' @export\nget.idCategories <- function(db, ...) {\n# ---------------------------------------\n  Categories <- db$Categories %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Categories$idc\n  names(result) <- Categories$WC\n  return(result)\n}\n\n\n#' @rdname get.idDocs\n#' @export\nget.idJournals <- function(db, ...) {\n# ---------------------------------------\n  Journals <- db$Journals %>% filter_(.dots = lazyeval::lazy_dots(...))\n  result <- Journals$idj\n  names(result) <- Journals$SO\n  return(result)\n}\n\n\n# ---------------------------------------\n\n#' @name rwos-internals\n#' @aliases .get.idDocs2\n#' @title rwos internal and secondary functions\n#' @description Listed below are supporting functions for the major methods in rwos.\n#' @keywords internal\n.get.idDocs2 <- function(db, idAuthors, idCategories, idAreas, idAddresses, idJournals,\n                        indices = TRUE) {\n  ifalse <- logical(nrow(db$Docs))\n  idDocs <- if(missing(idJournals)) !ifalse else db$Docs$idj %in% idJournals\n  if(!missing(idAuthors)) {\n    index <- ifalse\n    index[with(db$AutDoc, idd[ida %in% idAuthors])] <- TRUE\n    idDocs <- idDocs & index\n  }\n  if(!missing(idCategories)) {\n    index <- ifalse\n    index[with(db$CatDoc, idd[idc %in% idCategories])] <- TRUE\n    idDocs <- idDocs & index\n  }\n  if(!missing(idAreas)) {\n    index <- ifalse\n    index[with(db$AreaDoc, idd[idra %in% idAreas])] <- TRUE\n    idDocs <- idDocs & index\n  }\n  if(!missing(idAddresses)) {\n    index <- ifalse\n    index[with(db$AddAutDoc, idd[idad %in% idAddresses])] <- TRUE\n    idDocs <- idDocs & index\n  }\n  if(indices) idDocs <- which(idDocs)\n  return(idDocs)\n}\n",
    "created" : 1507290177871.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1289146264",
    "id" : "43070F11",
    "lastKnownWriteTime" : 1506340262,
    "last_content_update" : 1506340262,
    "path" : "~/Dropbox/_Actual/__Rankings/rwos_package/rwos/R/getid.R",
    "project_path" : "R/getid.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}